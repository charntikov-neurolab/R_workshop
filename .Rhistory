na.rm
)
# Rename the "mean" column
datac <- rename(datac, c("mean"=measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
# Example of using the function above
#dfc <- summarySE(mydataset, measurevar="Response", groupvars=c("Sex","DOSE"))
####################################################################################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#Load dataset
mydataset <- read.csv("Sample-Dose-Effect-Curve.csv")
#Explore dataset
summary(mydataset)
str(mydataset)
mydataset<-rename(mydataset, c("IV.Sex"="Sex", "DV.Activity"="Activity", "IV.DOSE"="DOSE", "DV.Response"="Response"))
str(mydataset)
mydataset$Subject<-as.factor(mydataset$Subject)
mydataset$DOSE<-as.factor(mydataset$DOSE)
#Explore dataset
summary(mydataset)
str(mydataset)
with(mydataset, (levels(Sex)))
mydataset$Sex<-with(mydataset, revalue(Sex, c("Fem"="F")))
str(mydataset)
### Subset dataset for separate analysis if needed
Female<-subset(mydataset, Sex=="F")
Male<-subset(mydataset, Sex=="M")
summary(Female)
summary(Male)
baseline<-lme(Response~1, random=~1 | Subject/DOSE/Sex, data=mydataset, method="ML")
doseModel<-update(baseline, .~. +DOSE)
sexModel<-update(doseModel, .~. +Sex)
mixModel<-update(sexModel, .~. +DOSE:Sex)
anova(baseline, doseModel, sexModel, mixModel)
summary(doseModel)
summary(mixModel)
dfc <- summarySE(mydataset, measurevar="Response", groupvars=c("Sex","DOSE"))
dfc
subject<-(1:10) # create a vector with subject numbers
subject # verify vector
level<-replicate(10, "control") # create a vector of level labels
level # verify vector
# create a vector with response variable
dv<-rnorm(10, mean=10, sd=1)
# here you can set desired number of subjects, mean, and sd for that level.
dv # verify vector
#combine vectors (subject, level, dv) into a dataframe
df1<-data.frame(subject=subject, dose=level, dv=dv)
df1 # verify data frame
subject<-(1:10)
subject
level<-replicate(10, "low") # change to another level
level
dv<-rnorm(10, mean=23, sd=3)
# change to reflect the effect (higher or lower responding; more or less variance).
# Here you are in control of your effects. Think how you want to play this out.
dv
df2<-data.frame(subject=subject, dose=level, dv=dv) # combine to another df
df
subject<-(1:10)
# change to appropriate subject number.
# Same if within subjects, different if between subjects
subject
level<-replicate(10, "medium") # change to another level
level
dv<-rnorm(10, mean=42, sd=5)
# change to reflect the effect (higher or lower responding; more or less variance).
# Here you are in control of your effects. Think how you want to play this out.
dv
df3<-data.frame(subject=subject, dose=level, dv=dv) # combine to another df
df3
subject<-(1:10)
subject
level<-replicate(10, "high") # change to another level
level
dv<-rnorm(10, mean=80, sd=10)
# change to reflect the effect (higher or lower responding; more or less variance).
# Here you are in control of your effects. Think how you want to play this out.
dv
df4<-data.frame(subject=subject, dose=level, dv=dv)
df4
df<-rbind(df1, df2, df3, df4)
summary(df)
sapply(df, mean, na.rm=TRUE)
sapply(df, mean)
library(Hmisc)
describe(df)
# Get summary for a complete dataset
summary(df)
# Get means excluding missing variables
library(Hmisc)
describe(df)
describe(mydata)
describe(df)
library(psych)
describe(df)
describe.by(df, dose)
describe(df) # Nice output with sds, ses, and means
summary(df)
describe.by(df, dose$df)
describe.by(df, group=dose)
describe.by(df, group=dv)
describeBy(df, group=dose)
describeBy(df, group=dose, mat=FALSE)
summary(df)
library(psych)
describeBy(df, group=dose, mat=FALSE)
latex(describe(mydataframe), file='data_summary')
latex(describe(df), file='data_summary')
latex(describe(df), file='data_summary.pdf')
summary(df)
library(Rmisc)
summarySE(df, measurevar="dv", groupvar="dose")
subject<-(1:10) # create a vector with subject numbers
subject # verify vector
level<-replicate(10, "control") # create a vector of level labels
level # verify vector
dv<-rnorm(10, mean=10, sd=1)
dv # verify vector
df1<-data.frame(subject=subject, dose=level, dv=dv)
df1 # verify data frame
subject<-(1:10)
subject
level<-replicate(10, "low") # change to another level
level
dv<-rnorm(10, mean=23, sd=3)
# change to reflect the effect (higher or lower responding; more or less variance).
# Here you are in control of your effects. Think how you want to play this out.
dv
df2<-data.frame(subject=subject, dose=level, dv=dv) # combine to another df
df2
df<-rbind(df1, df2, df3, df4)
df
df
summary(df)
library(Hmisc)
describe(df)
describe(df)
describe(df) # Nice output with sds, ses, and means
describeBy(df) # Nice output with sds, ses, and means
summarySE(df, measurevar="dv", groupvar="dose") # really good for visualizing with error bars
describe(df)
library(psych)
describe(df) # Nice output with sds, ses, and means
detach("package:Hmisc", unload=TRUE)
describe(df) # Nice output with sds, ses, and means
ggplot(df, aes(factor(dose), dv)) + # creates empty plot\\
geom_boxplot() + # to create boxplots on the plot\\
geom_jitter()
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot(df, aes(factor(dose), dv)) + # creates empty plot\\
geom_boxplot() + # to create boxplots on the plot\\
geom_jitter()
library(Rmisc) # load Rmisc package so we can use summarySE() function
dfse <- summarySE(df, measurevar="dv", groupvars=c("dose")) # get standard errors for df
dfse #
ggplot(dfse, aes(x=dose, y=dv, group=1)) +
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=dv-se, ymax=dv+se), width=.1)
ggplot(dfse, aes(x=dose, y=dv, group=1))
+
geom_line(
p1<-ggplot(df, aes(factor(dose), dv))
p1
p1<-ggplot(df, aes(factor(dose), dv))
p1
p1+geom_boxplot() # lets add boxplot layer
p1<-p1+geom_boxplot() # lets add boxplot layer
p1<-p1+geom_jitter()
p1 # lets visualize our creation
ggplot(df, aes(factor(dose), dv, colour=dose)) + # creates empty plot\\
geom_boxplot() + # to create boxplots on the plot\\
geom_jitter()
ggplot(df, aes(factor(dose), dv)) + # creates empty plot\\
geom_boxplot() + # to create boxplots on the plot\\
geom_jitter()
ipak(packages)
ggplot(dataset, aes(x = IV.DOSE, y = DV.Response, group = IV.Sex, colour=IV.Sex)) +
geom_boxplot()
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
ggplot(dataset, aes(x = IV.DOSE, y = DV.Response, group = IV.Sex, colour=IV.Sex)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, group = IV.Sex, colour=IV.Sex)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, group = IV.Sex, colour=IV.Sex)) +
geom_bar()
summary(dataset)
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, group=IV.Sex)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, colour=IV.Sex)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, colour=IV.Sex)) +
geom_boxplot()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "Rmisc", "tidyr", "RColorBrewer", "plotly", "ggplot2", "nlme", "dplyr", "cowplot", "grid", "gridExtra") # add or remove packages as needed
ipak(packages)
ggplot(dataset, aes(x = factor(IV.DOSE), y = DV.Response, colour=IV.Sex)) +
geom_boxplot()
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
Female<-subset(mydataset, Sex=="Fem")
Male<-subset(mydataset, Sex=="M")
summary(Female)
str(male)
str(Male)
dplyr::rename(dataset, IV.Sex=Sex)
dplyr::rename(dataset, Sex=IV.Sex)
summary(dataset)
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
summary(dataset)
utils::View(dataset)
dataset<-dplyr::rename(dataset, Response=DV.Response)
dataset<-dplyr::rename(dataset, Dose=IV.Dose)
dataset<-dplyr::rename(dataset, Dose=IV.DOSE)
summary(dataset)
Female<-dplyr::mutate(Female, newvar=Response*100)
summary(Female)
Female<-dplyr::mutate(Female, newvar=Response*Activity)
summary(Female)
Female<-dplyr::mutate(Female, newvar=Response + Activity)
summary(Female)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
# rename IV.Sex to Sex
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
# rename DV.Response to Response
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# verify dataset
summary(dataset)
Female<-subset(dataset, Sex=="Fem")
Male<-subset(dataset, Sex=="M")
# verify newly created data
summary(Female)
str(Male)
Female<-dplyr::mutate(Female, newvar=Response + Activity)
summary(Female)
Female<-dplyr::mutate(Female, newvar2=Response*Activity)
summary(Female)
Female<-dplyr::mutate(Female, newvar2=Response*100)
summary(Female)
new.dataset<-dply::full_join(Female, Male, by="Subject")
new.dataset<-dplyr::full_join(Female, Male, by="Subject")
summary(new.dataset)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
# rename IV.Sex to Sex
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
# rename DV.Response to Response
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# verify dataset
summary(dataset)
# view data in spreadsheet-like display
# utils::View(dataset)
# Subset dataset
Female<-subset(dataset, Sex=="Fem")
Male<-subset(dataset, Sex=="M")
droplevels(Female)
summary(Female)
Female<-droplevels(Female)
summary(Female)
Male<-droplevels(Male)
# make new variables
Female<-dplyr::mutate(Female, newvar1=Response + Activity)
Female<-dplyr::mutate(Female, newvar2=Response*Activity)
Female<-dplyr::mutate(Female, newvar3=Response*100)
summary(Female)
# combine datasets
new.dataset<-dplyr::full_join(Female, Male, by="Subject")
summary(new.dataset)
summary(new.dataset)
utils::View(dataset)
summary(new.dataset)
utils::View(new.dataset)
new.dataset<-dplyr::union(Female, Male)
new.dataset<-dplyr::bind_rows(Female, Male)
summary(new.dataset)
summary(Female)
Female<-dplyr::select(Female, one_of(c("Subject", "StartDate", "Drug", "Sex", "Activity", "Dose","Response")))
summary(Female)
new.dataset<-dplyr::bind_rows(Female, Male)
summary(new.dataset)
utils::View(new.dataset)
dataset<-as.factor(Sex$new.dataset)
dataset<-as.factor(new.dataset$Sex)
summary(dataset)
dataset$Sex<-as.factor(new.dataset$Sex)
summary(dataset)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
# rename IV.Sex to Sex
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
# rename DV.Response to Response
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# verify dataset
summary(dataset)
# view data in spreadsheet-like display
# utils::View(dataset)
# Subset dataset
Female<-subset(dataset, Sex=="Fem")
Male<-subset(dataset, Sex=="M")
# verify newly created data
summary(Female)
str(Male)
# drop unused levels
Female<-droplevels(Female)
Male<-droplevels(Male)
# make new variables
Female<-dplyr::mutate(Female, newvar1=Response + Activity)
Female<-dplyr::mutate(Female, newvar2=Response*Activity)
Female<-dplyr::mutate(Female, newvar3=Response*100)
summary(Female)
# remove newly created columns
Female<-dplyr::select(Female, one_of(c("Subject", "StartDate", "Drug", "Sex", "Activity", "Dose","Response")))
# combine datasets
new.dataset<-dplyr::bind_rows(Female, Male)
summary(new.dataset)
dataset$Subject<-as.factor(new.dataset$Subject)
summary(dataset)
dataset$Dose<-as.factor(new.dataset$SDose)
dataset$Dose<-as.factor(new.dataset$Dose)
summary(dataset)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
# rename IV.Sex to Sex
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
# rename DV.Response to Response
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# rename variable
# library(reshape)
mydata <- rename(mydata, c(M="Male"))
library(reshape)
mydata <- rename(mydata, c(M="Male"))
mydata <- rename(dataset, c(M="Male"))
summary(dataset)
dataset<- rename(dataset, c(M="Male"))
summary(dataset)
dataset<- rename(dataset, c(M="Male"))
load data
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
# rename IV.Sex to Sex
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
# rename DV.Response to Response
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# rename variable
# library(reshape)
dataset<- rename(dataset, c(M="Male"))
# verify dataset
summary(dataset)
dataset<- rename(dataset, c(Male="M"))
summary(dataset)
dataset<- rename(dataset, Male="M")
summary(dataset)
dataset<-dplyr::rename(dataset, Male$Sex=M$Sex)
dataset<-dplyr::rename(dataset, (Male$Sex)=(M$Sex))
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
dataset<-dplyr::rename(dataset, Response=DV.Response)
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
dataset<-dplyr::rename(dataset, (Male$Sex)=(M$Sex))
dataset<-dplyr::rename(dataset, Sex$Male=Sex$M)
dataset<-revalue(dataset, c(M=Male))
library(plyr)
dataset<-revalue(dataset, c(M=Male))
x<-with(dataset, M$Sex)
x<-with(dataset, Sex$dataset)
Sex$dataset
dataset$Sex
x<-with(dataset, Sex$M)
levels(dataset$Sex)[levels(dataset$Sex)=="M"] <- "Male"
summary(dataset)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "Rmisc", "tidyr", "RColorBrewer", "plotly", "ggplot2", "nlme", "dplyr", "cowplot", "grid", "gridExtra", "reshape", "plyr") # add or remove packages as needed
ipak(packages)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
summary(dataset)
dataset<-dplyr::rename(dataset, Sex=IV.Sex)
summary(dataset)
dataset<-dplyr::rename(dataset, Response=DV.Response)
# rename IV.Dose to Dose
dataset<-dplyr::rename(dataset, Dose=IV.DOSE) # note change in capitalization
# rename DV.Activity to Activity
dataset<-dplyr::rename(dataset, Activity=DV.Activity)
# rename variable
levels(dataset$Sex)[levels(dataset$Sex)=="M"] <- "Male"
summary(dataset)
utils::View(dataset)
Female<-subset(dataset, Sex=="Fem")
Male<-subset(dataset, Sex=="Male")
summary(Female)
Female<-droplevels(Female)
Male<-droplevels(Male)
summary(Female)
summary(Male)
Female<-dplyr::mutate(Female, newvar1=Response + Activity)
Female<-dplyr::mutate(Female, newvar2=Response*Activity)
Female<-dplyr::mutate(Female, newvar3=Response*100)
summary(Female)
Female<-dplyr::select(Female, one_of(c("Subject", "StartDate", "Drug", "Sex", "Activity", "Dose","Response")))
new.dataset<-dplyr::bind_rows(Female, Male)
summary(Female)
summary(Male)
new.dataset<-dplyr::bind_rows(Female, Male)
summary(new.dataset)
utils::View(new.dataset)
utils::View(new.dataset)
summary(new.dataset)
dataset$Subject<-as.factor(new.dataset$Subject)
dataset$Dose<-as.factor(new.dataset$Dose)
dataset$Sex<-as.factor(new.dataset$Sex)
summary(dataset)
puppy <- read.csv("data/Sample-Dose-Effect-Curve.csv")
puppy
summary(puppy)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
summary(mydataset)
str(mydataset)
mydataset<-rename(mydataset, c("IV.Sex"="Sex", "DV.Activity"="Activity", "IV.DOSE"="DOSE", "DV.Response"="Response"))
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "Rmisc", "tidyr", "RColorBrewer", "plotly", "ggplot2", "nlme", "dplyr", "cowplot", "grid", "gridExtra", "reshape", "plyr") # add or remove packages as needed
ipak(packages)
dataset <- read.csv("data/Sample-Dose-Effect-Curve.csv")
summary(mydataset)
str(mydataset)
mydataset<-rename(mydataset, c("IV.Sex"="Sex", "DV.Activity"="Activity", "IV.DOSE"="DOSE", "DV.Response"="Response"))
str(mydataset)
with(mydataset, (levels(Sex)))
mydataset$Sex<-with(mydataset, revalue(Sex, c("Fem"="F")))
str(mydataset)
library(psych)
with(mydataset, (describeBy(Response, list(DOSE, Sex), mat=TRUE)))
